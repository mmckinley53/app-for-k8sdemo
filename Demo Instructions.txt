/* Docker/Kubernetes Demo Preparation Guide
This is the demo preparation guide for the TP1025 Containers and Microservices in Telecom class.
It is not intended that the SME perform all of the exercises in this demo during class.
It is only intended to provide a guide for the SME to prepare for the Demo.

/* General Instructions:
Clone the repo locally 'git clone https://github.com/mmckinley53/app-for-k8sdemo.git'
Build Docker iamge docker image build -t amf-ctr:1.0 . from within the root directory of the repo
Perform Docker exercises found in Demo Instructions.txt
Make any corrections, Build, test until good
Push image to container registry
Perform Kubernetes exercises found in Demo Instructions.txt

/* Suggested Instructor Tools 
1. Docker For Windows w/ Kubernetes enabled
2. github account
3. Docker Hub account
4. Visual Studio Code (IDE)
5. Terminal Emulator besides CMD (e.g., cmder, MobiXterm, etc.)

/* Optional: To see a window with 3 horizontal cmder terminals:
1. Start cmder in administrative mode (start, type in 'cmder', search displays cmder icon, right click on cmder icon, select "Run as administrator")
2. Click on Cmder icon upper left corner of terminal. 
3. From pull-down menu select "Active Console":"Restart or Duplicate":"Split to Bottom"
4. To start Powershell in one of the terminals just type "powershell" at the cmder prompt (lamba)

/* If you haven't already installed git then install it now:
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

/* If you do not have an account with git, then create one at:
https://github.com/

/* If you need a little beginners tutorial on git, try these:
https://www.youtube.com/watch?v=SWYqp7iY_Tc&list=PLD0Wopb2FC7rRWkDSZ0PhhbP5Z7NJ4mXT
https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners

/* In your terminal emulator, navigate to a folder that you want your working folder
PS> cd /user/<username> 

/* Pull the example application folder from github
/*  git clone is basically a combination of:
/*  - git init (create the local repository)
/*  - git remote add (add the URL to that repository)
/*  - git fetch (fetch all branches from that URL to your local repository)
/*  - git checkout (create all the files of the main branch in your working tree)
PS> git clone https://github.com/mmckinley53/app-for-k8sdemo.git





/* 1st Demo:
/* Purpose: 
/*    Illustrate use of Docker:
/*      - view the list of local docker images
/*      - pull an existing docker container image from an external repository
/*      - start it, 
/*      - run commands inside it,
/*      - communicate to it from a command line, 
/*      - communicate to it from a browser,
/*      - exit 
/*      - list the running containers
/*      - stop it
/*      - remove it

/* Steps: 



/* 1st Section: Docker Ops Demo

/* Get the docker version
PS> docker -v

/* List the local Docker images
PS> docker images

/* Pull an images
PS> docker container pull ubuntu:latest

/* Check if the image has been downloaded
PS> docker images

/* Run the container and start a bash shell
PS> docker container run -it ubuntu:latest /bin/bash

/* Launch the container and run a command
PS> docker exec -it ubuntu:latest /bin/bash
# 

/* From inside the container, run a command
# ping 8.8.8.8

/* Exit the container
# exit
PS> 

/* List the running containers
PS> docker container logs

/* Attach to the running container
PS> docker container exec -it <container id> /bin/bash
#

/* Exit the container
# exit
PS> 

/* Stop the container
PS> docker stop <container id>

/* See if the container is still there
PS> docker container ls -a

/* Kill the container
PS> docker stop <container id>

/* Docker DEV demo

/* Open a browser and introduce Docker Hub:
/* Use browser to navigate to your Docker Hub repository (e.g., mmckinley5712/amf-ctr)
/* Click Explore tab to search for enodeb: select raraya - not much description
/* Go back to Explore tab and search for Python and click on Official Image checkbox

/* Pull a Docker image from Docker Hub
PS> docker pull 






/* Git hub stuff for developers

/*-------------------------------------------------------
/* Create a local repository 
PS> cd /users/mmckinley/K8SDemo/apps/amf 
PS> git init                    

/*--------------------------------------------------------
/* Configuration
/* Configure your user name and email
PS> git config --global user.name 'Mike McKinley'
PS> git config --global user.email 'mmckinle80@yahoo.com'

/*--------------------------------------------------------
/* Adding/Removing file/folders to/from the local "staging area"
/* Put a file into the local staging area
PS> git add Dockerfile 

/* View status of the files in the local folder and sub-folders
PS> git status

/* Remove a file or folder from the staging area
PS> git rm --cached Dockerfile

/* Add all files of a certain extension to the staging area
PS> git add *.yml           

/* Recursively add all files in a folder and sub-folders into the staging area
PS> git add .                   
                
/* As you make changes in files in the folder then git status shows 
/* what branch you are on and what files have been modified and not staged for commit
PS> git status 
On branch mybranch
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Demo Instructions.txt

/*--------------------------------------------------------------------
/* Git has detected the changes and issued a warning that there are "Changes not staged for commit" and must be added again
/* To fix this issue, you must add the file(s) into the staging area again:
PS> git add .                   
PS> git status                  

/*---------------------------------------------------------------------
/* Commit the files/folders in the staging area to the local repository
/* This command opens a vim editor to allow a comment to be inserted (see vim for instructions) 
/* then commits the file/folder(s) to the "local" repository
PS> git commit   

/* Alternate commit command that doesn't open the editor:
PS> git commit -m 'change text'

/*----------------------------------------------------------------------
/* ".gitignore" file
/* To prevent a file or a folder from being added to the staging area:
/* 1. Create a file called .gitignore
/* 2. Add the filename of the file that you want to ignore: log.txt
/* 3. Add the directory names of the folders that you want to ignore: \dir1
PS> git add .

/* Notice that log.txt and \dir1 are not included in the list
PS> git status                  

/*-----------------------------------------------------------------------
/* BRANCHES: To make changes to your code that don't affect the main code base: 
/* Create a branch!
PS> git branch mybranch

/* Note that after we create the branch (PS> git branch mybranch) we are still "on branch master"
PS> git status
On branch master
nothing to commit, working tree clean

/* To switch to our own branch:
PS> git checkout mybranch
Switched to branch 'mybranch'

PS> git status
On branch mybranch
nothing to commit, working tree clean

/* To add files to the new branch, just create a new file, or change an existing file, then add/commit
PS> git add .
PS> git commit -m 'Stuff on mybranch'
[mybranch a19be80] Stuff on mybranch
 2 files changed, 77 insertions(+), 32 deletions(-)

PS> git status
On branch mybranch
nothing to commit, working tree clean

/* To switch back to the 'master' branch:
PS> git checkout master
Switched to branch 'master'

/* Notice that any changes that you made in 'mybranch' do not appear in 'master'

/* When you are finished with your changes and ready to merge:
/* 1. Change to the 'master' 
PS> git checkout master
Switched to branch 'master'

/* 2. Merge your branch into the 'master' branch
PS> git merge mybranch
Updating e668d81..a19be80
Fast-forward
 Demo Instructions.txt | 107 +++++++++++++++++++++++++++++++++++---------------
 dir2/app.js           |   2 +-
 2 files changed, 77 insertions(+), 32 deletions(-)

/*==========================================================================
/* Remote repository
/* Use the browser to create a new repository on your github account
/* Follow the instructions on the screen: " ...or push and existing repository from the command line
/*      git remote add origin https://github.com/mmckinley53/app-for-k8sdemo.git
/*      git push -u origin master
PS> git remote add origin https://github.com/mmckinley53/app-for-k8sdemo.git
PS> git push -u origin master
Enumerating objects: 419, done.
Counting objects: 100% (419/419), done.
Delta compression using up to 4 threads
Compressing objects: 100% (404/404), done.
Writing objects: 100% (419/419), 566.15 KiB | 2.77 MiB/s, done.
Total 419 (delta 82), reused 0 (delta 0)
remote: Resolving deltas: 100% (82/82), done.
To https://github.com/mmckinley53/app-for-k8sdemo.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.

/* Now you may view your files on the github repository using the browser
/* Just click the reload button on the browser

/* To update a file and push it to the remote repository
/* First make a change in one of the files (e.g., README.md)
/* Then 1) Add, 2) Commit, 3) Push
PS> git add .
PS> git commit -m 'Changes to README.md'
[master ff56f82] update readme
 1 file changed, 4 insertions(+), 5 deletions(-)
PS> git push
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 326 bytes | 326.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/mmckinley53/app-for-k8sdemo.git
   15f6b2e..ff56f82  master -> master

/*========================================================================
/* Now the application is on the remote repository and is available for cloning
/* To clone, just navigate to an appropriate location for the folder and execute:
/* the command that is listed on the repository web page
PS> cd /users/mmckinley
PS> git clone https://github.com/mmckinley53/app-for-k8sdemo.git

/* Navigate to new folder and verify folder contents match 
PS> cd /users/mmckinley/app-for-k8sdemo.git

/* To pull down all changes from the remote repository:
PS> git pull













                                








/* To run a command continuously from one of the terminal windows in cmder:
while(1){ kubectl get pods;start-sleep -seconds 2;clear }

while(1){ curl 192.168.0.146:30002/api/hostname;start-sleep -seconds 2;clear }

while(1){ kubectl logs --selector app=amf ;start-sleep -seconds 2;clear }
