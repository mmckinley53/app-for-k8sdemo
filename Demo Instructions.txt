/* Docker/Kubernetes Demo Preparation Guide
This is the demo preparation guide for the TP1025 Containers and Microservices in Telecom class.
It is not intended that the SME perform all of the exercises in this demo during class.
It is only intended to provide a guide for the SME to prepare for the Demo.

/* Start with a clean lab 
PS> kubectl delete services --all
PS> kubectl delete deployments --all
PS> docker image rm amf-ctr:1.0 
PS> docker image rm mmckinley5712/amf-ctr:1.0
PS> docker image rm amf-ctr:2.0 
PS> docker image mmckinley5712/amf-ctr:2.0

/* Clean up the Docker Hub
/* Browse at https://hub.docker.com
/* Navigate to mmckinley5712/amf-ctr. Verify 1.0 tag is available and is current



/* General Instructions:
Optional: Clone the repo locally 'git clone https://github.com/mmckinley53/app-for-k8sdemo.git'
Build Docker image 'docker image build -t amf-ctr:1.0 .' from within the root directory of the repo
Perform Docker exercises found in Demo Instructions.txt
Make any corrections, Build, test until good
Push image to container registry
Perform Kubernetes exercises found in Demo Instructions.txt

/* Suggested Instructor Tools 
1. Docker For Windows w/ Kubernetes enabled
2. github account
3. Docker Hub account
4. Visual Studio Code (IDE)
5. Terminal Emulator besides CMD (e.g., cmder, MobiXterm, etc.)

/* Optional: To see a window with 3 horizontal cmder terminals:
1. Start cmder in administrative mode (start, type in 'cmder', search displays cmder icon, right click on cmder icon, select "Run as administrator")
2. Click on Cmder icon upper left corner of terminal. 
3. From pull-down menu select "Active Console":"Restart or Duplicate":"Split to Bottom"
4. To start Powershell in one of the terminals just type "powershell" at the cmder prompt (lamba)

/* If you haven't already installed git then install it now:
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

/* If you do not have an account with git, then create one at:
https://github.com/

/* If you need a little beginners tutorial on git, try these:
https://www.youtube.com/watch?v=SWYqp7iY_Tc&list=PLD0Wopb2FC7rRWkDSZ0PhhbP5Z7NJ4mXT
https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners




/*=====================================================================
/* Pull the application folder from the remotes source control (github)
/* 
/*  git clone is basically a combination of:
/*  - git init (create the local repository)
/*  - git remote add (add the URL to that repository)
/*  - git fetch (fetch all branches from that URL to your local repository)
/*  - git checkout (create all the files of the main branch in your working tree)


/* In your terminal emulator, navigate to a folder that you want your working folder
PS> cd /user/<username> 

/* Pull the application folder from github
PS> git clone https://github.com/mmckinley53/app-for-k8sdemo.git



/***********************************************************************
/* For Tech Primer, Start Here: Docker Demo
/*======================================================================

/* Display the application
/* 
/* Navigate to the new local repository and list the contents
PS> cd C:\users\mmckinley\app-for-k8sdemo\
PS> ls

/* Display the app.js software and explain a little:
/*  - on startup, write the hostname to the console 
/*  - on receiving '/' URL then 
/*        send 'Love Docker!' html, 
/*        and write "Hostname is <Hostname>" to the console )
/*  - on receiving '/api/hostname' URL then 
/*        send '<Hostname>' html, 
/*        and write "Hostname is <Hostname>" to the console )
PS> cat app.js /* or use your favorite editor to display the file
PS> cat home.pug /* or use your favorite editor to display the file

/*========================================================================
/* Docker Demo:
/* Purpose: 
/*    Illustrate use of Docker:
/*      - Examine the DockerFile
/*      - Build a container image
/*      - View the list of local docker images
/*      - Run and Test the container
/*      - Run another instance of the container and test
/*      - Stop and Remove the containers
/*      - Make a minor change in the application
/*      - Build a new image with the updated app
/*      - Run and Test the new container
/*      - Run the old version and compare the differences
/*      - Stop and Remove the old and new containers but keep the images

/* View the Dockerfile with cat or an editor
PS> cat Dockerfile

/* Build a local container image
PS> docker build -t amf-ctr:1.0 .

/* View list of Docker images to see if we already have an amf-ctr:1.0 image available locally
PS> docker images

/* Test the container by entering these urls into a browser
/* http://localhost:80/
/* http://localhost:80/api/hostname
/* http://localhost:80/api/UEcontexts

/* Test the container by entering the curl commands into a command line on the host
PST2> curl http://localhost:80
PST2> curl http://localhost:80/api/hostname
PST2> curl http://localhost:80/api/UEcontexts

/* Attach to the running container and execute a local command
PST2> docker exec -it amf-ctr1 /bin/bash
# echo $HOSTNAME

/* Display the local container IP address
# ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)
        RX packets 69  bytes 6969 (6.8 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 42  bytes 5645 (5.5 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        loop  txqueuelen 1  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

/* Examine the previous output and note the IP address (e.g., 172.17.0.2)


Conduct tests between containers
/* SME should setup two windows
/*   - PST2 - attach to amf-ctr1
/*   - PST3 - attach to amf-ctr2

/* If we create another docker container, it will be assigned another IP address.
/* Note that incoming packets are routed to the host IP, not to the container IP.
/* Inside the host, the external IP and port is mapped to the internal IP and port (in this case 8080).
/* The external ports must be unique or there will be a port mapping error

/* Start another container with the same image.  
/* Note the external port is different from the first one
PST3> docker run -d --name amf-ctr2 -p 81:8080 amf-ctr:1.0

/* Attach to the second container and run a shell command
PS> docker exec -it amf-ctr2 /bin/sh 
# echo $HOSTNAME 
# ifconfig
/* Exercise: eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)
        RX packets 15  bytes 1138 (1.1 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        loop  txqueuelen 1  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        

/* From amf-ctr1 in PST2 curl to amf-ctr2 using host IP, port 80
# curl http://192.168.150.225:81

/* From PST3 curl to amf-ctr1 using host IP, port 81
# curl http://192.168.150.225:80

/* Use the browser to test the first container port 80
/* Browse at http://192.168.150.225:80

/* Use the browser to test the second container port 81
/* Browse at http://192.168.150.225:81

/* Exit both containers (not shown) and Stop both containers
PST2> docker stop amf-ctr1 amf-ctr2

/* List the containers. Note that the containers are stopped but not removed
PS> docker container ls -a

/* Remove both containers
PS> docker rm amf-ctr1 amf-ctr2

/* List the containers. Note that the containers are stopped and removed
PS> docker container ls -a


/*===================================================================================
/* In this section you will update the app.
/* Then you will build a new image with the updates using a different tag.
/* Then you will test it and then push the new version amf-ctr:2.0 to Docker Hub.

/* Make a minor change in the app.js file (e.g., Change "Love Docker" to "Love Kubernetes")
/* Use your preferred editor to make the change in app.js

/* Use cat or an editor to display the Dockerfile
PS> cat Dockerfile

/* Build the updated docker image with a new tag (e.g., 2.0)
PS> docker build -t amf-ctr:2.0 .

/* Verify that the local image has been built
PS> docker images

/* Run the updated version and use name amf-ctr2, port 81, image amf-ctr:2.0
PS> docker run -d --name amf-ctr2 -p 81:8080 amf-ctr:2.0

/* Verify the changes are correct (browser displays "Love Docker")
/* Browse to http://localhost:81
/* This should display "Love Kubernetes" on one line and the hostname below it

/* Start amf-ctr:1.0 and use name amf-ctr1, port 80, image amf-ctr:1.0
PS> docker run -d --name amf-ctr1 -p 80:8080 amf-ctr:1.0

/* In another Browser window, browse to http://localhost:80
/* This should display "Love Docker" on one line and the hostname below it
/* Note the difference in hostname. This will be used in the kubernetes exercise

/* After verification, stop and remove the updated containers
/* Exit both containers (not shown) and Stop both containers
PS> docker stop amf-ctr1 amf-ctr2

/* List the containers. Note that the containers are stopped but not removed
PS> docker container ls -a

/* Remove both containers
PS> docker rm amf-ctr1 amf-ctr2

/* List the containers. Note that the containers are stopped and removed
PS> docker container ls -a



/*-----------------------------------------------------------------------------------
/* For the Demo, this is OPTIONAL - Only do this if there is available time
/* In this section, you will save the updated image amf-ctr:2.0 to the remote repository at Docker Hub

/* Login to Docker Hub
PS> docker login

/* Verify that amf-ctr:2.0 is in the local repository
PS> docker images

/* Tag the image with 2.0 and identify your local repository 
PS> docker image tag amf-ctr:2.0 mmckinley5712/amf-ctr:2.0

/* Check to see that the image has been stored in the local repository with the new tag
PS> docker images

/* Store the image in Docker Hub
PS> docker image push mmckinley5712/amf-ctr:2.0

/* Verify the image has been stored in your repository via the Docker Hub website 
/* Browse at https://hub.docker.com
/* Navigate to mmckinley5712/amf-ctr. Verify 2.0 tag is available






/*=================================================================
/* Kubernetes Demo Overview
/* - Deploy a Pod and manage it
/* - Deploy a Deployment and manage it
/* - Illustrate the use of Services
/* - Illustrate Self-Healing
/* - Illustrate Manual Scaling
/* - Illustrate Rolling updates
/* - Illustrate Rollback

/*-----------------------------------------------------------
/* Pods

/* Display the pod manifest file
PS> cat amf-pod.yml

/* Create a pod
PS> kubectl apply -f amf-pod.yml

/* List the running Pods 
PS> kubectl get pods

/* List the running Pods with extra information including IP Address
PS> kubectl get pods -o wide

/* List a particular Pod
PS> kubectl get pods amf-pod

/* Describe the details of a pod
PS> kubectl describe pod amf-pod

/* Execute a command inside a Pod
PS> kubectl exec amf-pod ifconfig

/* Attach to the first container in a Pod and start a shell
PS> kubectl exec -it amf-pod /bin/bash
#

/* Check Pod connectivity
# curl localhost:8080
# curl localhost:8080/api/hostname
# curl localhost:8080/api/UEcontexts
# cd src 
# cat stdout.txt

/* De-attach from the Pod
# exit

/* Delete the Pod
PS> kubectl delete pod amf-pod


/*-------------------------------------------------------
/* Deployments

/* Display the deployment manifest file
PS> cat amf-deploy.yml  /* or use editor to show file

/* Monitor the deployment
PST1> while(1){ kubectl get all -o wide;start-sleep -seconds 2;clear }

/* Create Deployment
PST2> kubectl apply -f .\amf-deploy.yml

/* Illustrate Self-Healing with Deployments/Replications
/* Delete one of the pods and observe that the pod is immediately replaced by another
/* This is best illustrated with multiple terminals with one terminal 
/* looping with the "get pods all -o wide' command and the other terminal doing the delete
PST2> kubectl delete pod <pod/amf-deploy-76b99cdd5d-2gqng>
/* Illustrate deletion of all pods
PST2> kubectl delete pods --all
/* Wait until all pods are terminated and replaced with new running pods

/* Illustrate Scaling with Deployments/Replications
/* - Continue to display the state of the objects
/* - Edit the Deployments object and increment the 'replicas' count, save and close
/* - Observe the increase in the number of replicas
/* - To scale down, edit the Deployments object and decrement the replica count, save, and close

/* Edit the Deployments object, and increment the replicas count, save, and close
PST2> kubectl edit deployment amf-deploy

/* Now show the connectivity failure between Pods when a Pod is destroyed:
/* - Continue to display the state of the objects
/* - Attach to one of the pods
/* - Start sending http requests to another pod using curl
/* - Delete the target pod
/* - Continue to send http requests until failure

/* Attach to one of the pods
PST3> kubectl exec -it <pod-name> /bin/bash
# 

/* Start sending http requests to another pod using curl
# curl http://<IP Address of target pod>:8080

/* Continue sending http requests as you delete the target pod. The curl command will eventually fail.
PST2> kubectl delete pod <target pod>





/*---------------------------------------------------------
/* Service
/* - Display Services manifest file
/* - Create a Service
/* - Illustrate connectivity, self-healing and load balancing between Pods
/* - Illustrate connectivity, self-healing and load balancing for external clients

/* Display the Services manifest file
PST3> cat amf-svc.yml  /* or display with your editor

/* Create a Service with the selector (app:amf)
PST3> kubectl apply -f .\amf-svc.yml

/* Continuously display the state of all objects
/* Note the new information in the Service object: Cluster-IP/Port and NodePort
PST1> while(1){ kubectl get all -o wide;start-sleep -seconds 2;clear }


/* Illustrate Load Balancing for Pod to Pod Communications
/* - Send http messages from one pod to the Cluster-IP/Port from the service object
/* - Send several messages repeatedly and notice that the hostname changes as a 
/*   result of the random load-balancing provided by the Service

/* Attach to a pod
PST3> kubectl exec -it amf-deploy-76b99cdd5d-66sdj /bin/bash

/* Illustrate load-balancing for internal clients
/* Repeatedly send http messages from the first pod to the <Cluster-IP>:<port>/api/hostname 
/* and observe the hostname changes randomly
# curl <cluster-ip>:8080/api/hostname
[root@amf-deploy-76b99cdd5d-49mjk /]# curl <Custer-IP>:<port>/api/hostname /* e.g., curl 
{"COMPUTERNAME":"amf-deploy-76b99cdd5d-49mjk"}[root@amf-deploy-76b99cdd5d-49mjk /]# curl 10.104.158.18:8080/api/hostname
{"COMPUTERNAME":"amf-deploy-76b99cdd5d-49mjk"}[root@amf-deploy-76b99cdd5d-49mjk /]# curl 10.104.158.18:8080/api/hostname
{"COMPUTERNAME":"amf-deploy-76b99cdd5d-lzvn4"}[root@amf-deploy-76b99cdd5d-49mjk /]# curl 10.104.158.18:8080/api/hostname
{"COMPUTERNAME":"amf-deploy-76b99cdd5d-lzvn4"}[root@amf-deploy-76b99cdd5d-49mjk /]# curl 10.104.158.18:8080/api/hostname
{"COMPUTERNAME":"amf-deploy-76b99cdd5d-p776h"}[root@amf-deploy-76b99cdd5d-49mjk /]# curl 10.104.158.18:8080/api/hostname
{"COMPUTERNAME":"amf-deploy-76b99cdd5d-p776h"}[root@amf-deploy-76b99cdd5d-49mjk /]# curl 10.104.158.18:8080/api/hostname

/* Illustrate load-balancing for external clients
/* Use Postman with Temporary header 'Connection' = 'close' instead of 'keepalive
/* GET http:localhost:30002



/* Illustrate self-healing without downtime for Pod to Pod Communications
/* - continue to display the state of the objects
/* - attach to the FIRST pod if you are not already attached 
/* - continue to send http requests from the FIRST pod to the Cluster-IP/Port
/* - Delete all the OTHER pods (NOT the FIRST Pod) while continuing to send http messages from the first pod
/* - Note that there are no failures as the new pods begin to replace the old
PST3# watch -t curl http://<Cluster IP>:8080
PST2> kubectl delete pods <all but FIRST pod>


/* Illustrate self-healing without downtime from an external client
/* - Browse to http://localhost:<NodePort>/api/hostname, e.g., http://localhost:30002/api/hostname
/* - Refresh about every 10 seconds and observe that the hostname is changing randomly
/* OR BETTER - use Postman with Temporary header 'Connection' = 'close' instead of 'keepalive
/* - Delete all the pods while sending http messages from the first pod
/* - Note that there are no failures


/* Illustrate Rolling Update with no downtime
/* - Continue to display the state of the objects
/* - Edit the Deployment object and change the version of the image to amf-ctr:2.0
/* - Use the browser (or Postman) to verify the change at http://localhost:30002
PST3> kubectl edit deployment amf-deploy  /* Inside the editor change the tag to 2.0

/* Illustration Rollback with no downtime
/* - This is essentially the reverse of Folling Updates!
/* - Continue to display the state of the objects
/* - Edit the Deployment object and change the version of the image to amf-ctr:1.0
/* - Use the browser (or Postman) to verify the change at http://localhost:30002
PST3> kubectl edit deployment amf-deploy  /* Inside the editor change the tag to 1.0


/* Clean up the lab 
PS> kubectl delete services --all
PS> kubectl delete deployments --all
PS> docker image rm amf-ctr:2.0 mmckinley-ctr:2.0

/* Clean up the Docker Hub
/* Browse at https://hub.docker.com
/* Navigate to mmckinley5712/amf-ctr. Verify 1.0 tag is available and is current










/* Show that you cannot ping to the pods directly from an external client using these addresses
PS> ping 10.1.0.185

/* Try to curl to the container - fails
PS> curl http://localhost:80








/*-------------------------------------------
/* Pods
/* - Display Pod manifest file
/* - Create a pod
/* - List running pods
/* - List running pods with IP address info 
/* - List a particular Pod
/* - Describe a Pod
/* - Execute commands in the container
/* - Cleanup the Pod




/*------------------------------------------
/* Deployments
/* - Display Deployment manifest file
/* - Create a Deployment
/* - Display the Deployment/Replications
/* 




/*------------------------------------------
/* Self-Healing
/* Illustrate Self-Healing

/*------------------------------------------
/* Scaling
/* Illustrate Scaling

/*-----------------------------------------
/* Rolling updates
/* Illustrate rolling updates

/*-----------------------------------------
/* Rollback
/* Illustrate Rollback









/*==============================================================
/* Git hub stuff for developers

/*-------------------------------------------------------
/* Create a local repository 
PS> cd /users/mmckinley/K8SDemo/apps/amf 
PS> git init                    

/*--------------------------------------------------------
/* Configuration
/* Configure your user name and email
PS> git config --global user.name 'Mike McKinley'
PS> git config --global user.email 'mmckinle80@yahoo.com'

/*--------------------------------------------------------
/* Adding/Removing file/folders to/from the local "staging area"
/* Put a file into the local staging area
PS> git add Dockerfile 

/* View status of the files in the local folder and sub-folders
PS> git status

/* Remove a file or folder from the staging area
PS> git rm --cached Dockerfile

/* Add all files of a certain extension to the staging area
PS> git add *.yml           

/* Recursively add all files in a folder and sub-folders into the staging area
PS> git add .                   
                
/* As you make changes in files in the folder then git status shows 
/* what branch you are on and what files have been modified and not staged for commit
PS> git status 
On branch mybranch
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Demo Instructions.txt

/*--------------------------------------------------------------------
/* Git has detected the changes and issued a warning that there are "Changes not staged for commit" and must be added again
/* To fix this issue, you must add the file(s) into the staging area again:
PS> git add .                   
PS> git status                  

/*---------------------------------------------------------------------
/* Commit the files/folders in the staging area to the local repository
/* This command opens a vim editor to allow a comment to be inserted (see vim for instructions) 
/* then commits the file/folder(s) to the "local" repository
PS> git commit   

/* Alternate commit command that doesn't open the editor:
PS> git commit -m 'change text'

/*----------------------------------------------------------------------
/* ".gitignore" file
/* To prevent a file or a folder from being added to the staging area:
/* 1. Create a file called .gitignore
/* 2. Add the filename of the file that you want to ignore: log.txt
/* 3. Add the directory names of the folders that you want to ignore: \dir1
PS> git add .

/* Notice that log.txt and \dir1 are not included in the list
PS> git status                  

/*-----------------------------------------------------------------------
/* BRANCHES: To make changes to your code that don't affect the main code base: 
/* Create a branch!
PS> git branch mybranch

/* Note that after we create the branch (PS> git branch mybranch) we are still "on branch master"
PS> git status
On branch master
nothing to commit, working tree clean

/* To switch to our own branch:
PS> git checkout mybranch
Switched to branch 'mybranch'

PS> git status
On branch mybranch
nothing to commit, working tree clean

/* To add files to the new branch, just create a new file, or change an existing file, then add/commit
PS> git add .
PS> git commit -m 'Stuff on mybranch'
[mybranch a19be80] Stuff on mybranch
 2 files changed, 77 insertions(+), 32 deletions(-)

PS> git status
On branch mybranch
nothing to commit, working tree clean

/* To switch back to the 'master' branch:
PS> git checkout master
Switched to branch 'master'

/* Notice that any changes that you made in 'mybranch' do not appear in 'master'

/* When you are finished with your changes and ready to merge:
/* 1. Change to the 'master' 
PS> git checkout master
Switched to branch 'master'

/* 2. Merge your branch into the 'master' branch
PS> git merge mybranch
Updating e668d81..a19be80
Fast-forward
 Demo Instructions.txt | 107 +++++++++++++++++++++++++++++++++++---------------
 dir2/app.js           |   2 +-
 2 files changed, 77 insertions(+), 32 deletions(-)

/*-----------------------------------------------------------------------------
/* Remote repository
/* Use the browser to create a new repository on your github account
/* Follow the instructions on the screen: " ...or push and existing repository from the command line
/*      git remote add origin https://github.com/mmckinley53/app-for-k8sdemo.git
/*      git push -u origin master
PS> git remote add origin https://github.com/mmckinley53/app-for-k8sdemo.git
PS> git push -u origin master
Enumerating objects: 419, done.
Counting objects: 100% (419/419), done.
Delta compression using up to 4 threads
Compressing objects: 100% (404/404), done.
Writing objects: 100% (419/419), 566.15 KiB | 2.77 MiB/s, done.
Total 419 (delta 82), reused 0 (delta 0)
remote: Resolving deltas: 100% (82/82), done.
To https://github.com/mmckinley53/app-for-k8sdemo.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.

/* Now you may view your files on the github repository using the browser
/* Just click the reload button on the browser

/* To update a file and push it to the remote repository
/* First make a change in one of the files (e.g., README.md)
/* Then 1) Add, 2) Commit, 3) Push
PS> git add .
PS> git commit -m 'Changes to README.md'
[master ff56f82] update readme
 1 file changed, 4 insertions(+), 5 deletions(-)
PS> git push
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 326 bytes | 326.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/mmckinley53/app-for-k8sdemo.git
   15f6b2e..ff56f82  master -> master

/*-----------------------------------------------------------------------
/* Now the application is on the remote repository and is available for cloning
/* To clone, just navigate to an appropriate location for the folder and execute:
/* the command that is listed on the repository web page
PS> cd /users/mmckinley
PS> git clone https://github.com/mmckinley53/app-for-k8sdemo.git

/* Navigate to new folder and verify folder contents match 
PS> cd /users/mmckinley/app-for-k8sdemo.git

/* To pull down all changes from the remote repository:
PS> git pull













                                






/*==========================================================================
/* Some tips for display

/* To run a command continuously from one of the terminal windows in cmder:
while(1){ kubectl get pods;start-sleep -seconds 2;clear }

while(1){ curl 192.168.150.225:30002/api/hostname;start-sleep -seconds 2;clear }

while(1){ kubectl logs --selector app=amf ;start-sleep -seconds 2;clear }

/*=============================================================================
/* Clean up

/* Remove all dangling images
PS> docker images -f "dangling=true"
PS> docker rmi <list of dangling images>
